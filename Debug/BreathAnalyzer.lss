
BreathAnalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000436  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000bc4  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000840  00000000  00000000  0000107c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  7a:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adcInit>:
#include <avr\io.h>


//TODO: make adc interrupt driven

void adcInit(void){
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62

	ADMUX = (1<<REFS0);		//set reference voltage to AVcc
  8a:	e7 e2       	ldi	r30, 0x27	; 39
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e4       	ldi	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	ADMUX |= 1; 			//set port ADC1 as ADC input
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	8c 93       	st	X, r24
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(ADPS1)|(ADPS0); //Enable ADC with Prescalar=Fcpu/128
  a0:	e6 e2       	ldi	r30, 0x26	; 38
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	85 e8       	ldi	r24, 0x85	; 133
  a6:	80 83       	st	Z, r24
}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <adcStart>:

void adcStart(void){
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |= 1 << ADSC;
  b6:	a6 e2       	ldi	r26, 0x26	; 38
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e6 e2       	ldi	r30, 0x26	; 38
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 64       	ori	r24, 0x40	; 64
  c2:	8c 93       	st	X, r24
}
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <adcIsFinished>:

char adcIsFinished(void){
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
	if(ADCSRA & (1 << ADIF))
  d4:	e6 e2       	ldi	r30, 0x26	; 38
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 2f       	mov	r24, r24
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	80 71       	andi	r24, 0x10	; 16
  e0:	90 70       	andi	r25, 0x00	; 0
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	19 f0       	breq	.+6      	; 0xec <adcIsFinished+0x22>
		return 1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	01 c0       	rjmp	.+2      	; 0xee <adcIsFinished+0x24>
	else
		return 0;
  ec:	19 82       	std	Y+1, r1	; 0x01
  ee:	89 81       	ldd	r24, Y+1	; 0x01
}
  f0:	0f 90       	pop	r0
  f2:	cf 91       	pop	r28
  f4:	df 91       	pop	r29
  f6:	08 95       	ret

000000f8 <adcMeasure>:

uint16_t adcMeasure(void){
  f8:	df 93       	push	r29
  fa:	cf 93       	push	r28
  fc:	00 d0       	rcall	.+0      	; 0xfe <adcMeasure+0x6>
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
	uint16_t result;

	adcStart();
 102:	0e 94 57 00 	call	0xae	; 0xae <adcStart>

	while(!adcIsFinished());
 106:	0e 94 65 00 	call	0xca	; 0xca <adcIsFinished>
 10a:	88 23       	and	r24, r24
 10c:	e1 f3       	breq	.-8      	; 0x106 <adcMeasure+0xe>

	result = ADCL;
 10e:	e4 e2       	ldi	r30, 0x24	; 36
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	9a 83       	std	Y+2, r25	; 0x02
 11a:	89 83       	std	Y+1, r24	; 0x01
	result |= ADCH << 8;
 11c:	e5 e2       	ldi	r30, 0x25	; 37
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	88 2f       	mov	r24, r24
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	98 2f       	mov	r25, r24
 128:	88 27       	eor	r24, r24
 12a:	9c 01       	movw	r18, r24
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	9a 81       	ldd	r25, Y+2	; 0x02
 130:	82 2b       	or	r24, r18
 132:	93 2b       	or	r25, r19
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	89 83       	std	Y+1, r24	; 0x01

	return result;
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	9a 81       	ldd	r25, Y+2	; 0x02
}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <main>:
#include "Includes/adc.h"
#include "Includes/port.h"
#include "Includes/uart.h"
#include "Includes/utils.h"

int main(void){
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	00 d0       	rcall	.+0      	; 0x14c <main+0x6>
 14c:	00 d0       	rcall	.+0      	; 0x14e <main+0x8>
 14e:	0f 92       	push	r0
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	uint16_t measure;
	char temp[3];

	portInit();
 154:	0e 94 ee 00 	call	0x1dc	; 0x1dc <portInit>
	adcInit();
 158:	0e 94 41 00 	call	0x82	; 0x82 <adcInit>
	uartInit(4800);
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	92 e1       	ldi	r25, 0x12	; 18
 160:	0e 94 03 01 	call	0x206	; 0x206 <uartInit>
//	uartSendChar('l');
//	uartSendChar('o');
//	uartSendChar('\n');
//	uartSendChar('\r');

	uartSendString("Hello world\n\r", 14);
 164:	80 e6       	ldi	r24, 0x60	; 96
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	4e e0       	ldi	r20, 0x0E	; 14
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	70 e0       	ldi	r23, 0x00	; 0
 170:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <uartSendString>

	measure = adcMeasure();
 174:	0e 94 7c 00 	call	0xf8	; 0xf8 <adcMeasure>
 178:	9a 83       	std	Y+2, r25	; 0x02
 17a:	89 83       	std	Y+1, r24	; 0x01

	//send data via UART
	convertToChar(measure, temp);
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	9e 01       	movw	r18, r28
 180:	2d 5f       	subi	r18, 0xFD	; 253
 182:	3f 4f       	sbci	r19, 0xFF	; 255
 184:	b9 01       	movw	r22, r18
 186:	0e 94 9c 01 	call	0x338	; 0x338 <convertToChar>
	uartSendChar(temp[2]);
 18a:	8d 81       	ldd	r24, Y+5	; 0x05
 18c:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar(temp[1]);
 190:	8c 81       	ldd	r24, Y+4	; 0x04
 192:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar(temp[0]);
 196:	8b 81       	ldd	r24, Y+3	; 0x03
 198:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar('\n');
 19c:	8a e0       	ldi	r24, 0x0A	; 10
 19e:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar('\r');
 1a2:	8d e0       	ldi	r24, 0x0D	; 13
 1a4:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	convertToChar(measure >> 8, temp);
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	89 2f       	mov	r24, r25
 1ae:	99 27       	eor	r25, r25
 1b0:	9e 01       	movw	r18, r28
 1b2:	2d 5f       	subi	r18, 0xFD	; 253
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	b9 01       	movw	r22, r18
 1b8:	0e 94 9c 01 	call	0x338	; 0x338 <convertToChar>
	uartSendChar(temp[2]);
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar(temp[1]);
 1c2:	8c 81       	ldd	r24, Y+4	; 0x04
 1c4:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar(temp[0]);
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar('\n');
 1ce:	8a e0       	ldi	r24, 0x0A	; 10
 1d0:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
	uartSendChar('\r');
 1d4:	8d e0       	ldi	r24, 0x0D	; 13
 1d6:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
 1da:	ff cf       	rjmp	.-2      	; 0x1da <main+0x94>

000001dc <portInit>:
#include "Includes/port.h"

#include <avr\io.h>


void portInit(void){
 1dc:	df 93       	push	r29
 1de:	cf 93       	push	r28
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	/*Configure PORTA Pin 0 - Power On LED*/
	DDRA |= OUT << PIN0;	//set pin direction as output
 1e4:	aa e3       	ldi	r26, 0x3A	; 58
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	ea e3       	ldi	r30, 0x3A	; 58
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8c 93       	st	X, r24
	PORTA |= 1 << PIN0;		//set pin value to high
 1f2:	ab e3       	ldi	r26, 0x3B	; 59
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	eb e3       	ldi	r30, 0x3B	; 59
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	81 60       	ori	r24, 0x01	; 1
 1fe:	8c 93       	st	X, r24

	/*TODO: configure input pin for button - start adc measure*/

}
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <uartInit>:


//TODO: made UART interrupt driven

void uartInit(unsigned int baudRate)
{
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	00 d0       	rcall	.+0      	; 0x20c <uartInit+0x6>
 20c:	00 d0       	rcall	.+0      	; 0x20e <uartInit+0x8>
 20e:	00 d0       	rcall	.+0      	; 0x210 <uartInit+0xa>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	9e 83       	std	Y+6, r25	; 0x06
 216:	8d 83       	std	Y+5, r24	; 0x05
	uint32_t ubrr;

	UCSRA= 0x00;                 // Clear the UASRT status register
 218:	eb e2       	ldi	r30, 0x2B	; 43
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	10 82       	st	Z, r1

	/*calculate ubrr register value*/
	ubrr = FOSC/16/baudRate-1;
 21e:	8d 81       	ldd	r24, Y+5	; 0x05
 220:	9e 81       	ldd	r25, Y+6	; 0x06
 222:	9c 01       	movw	r18, r24
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	84 e2       	ldi	r24, 0x24	; 36
 22a:	94 ef       	ldi	r25, 0xF4	; 244
 22c:	a0 e0       	ldi	r26, 0x00	; 0
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	bc 01       	movw	r22, r24
 232:	cd 01       	movw	r24, r26
 234:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__divmodsi4>
 238:	da 01       	movw	r26, r20
 23a:	c9 01       	movw	r24, r18
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	a1 09       	sbc	r26, r1
 240:	b1 09       	sbc	r27, r1
 242:	89 83       	std	Y+1, r24	; 0x01
 244:	9a 83       	std	Y+2, r25	; 0x02
 246:	ab 83       	std	Y+3, r26	; 0x03
 248:	bc 83       	std	Y+4, r27	; 0x04

	/*Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8);
 24a:	e0 e4       	ldi	r30, 0x40	; 64
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	ab 81       	ldd	r26, Y+3	; 0x03
 254:	bc 81       	ldd	r27, Y+4	; 0x04
 256:	89 2f       	mov	r24, r25
 258:	9a 2f       	mov	r25, r26
 25a:	ab 2f       	mov	r26, r27
 25c:	bb 27       	eor	r27, r27
 25e:	80 83       	st	Z, r24
	UBRRL = (unsigned char)ubrr;
 260:	e9 e2       	ldi	r30, 0x29	; 41
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	80 83       	st	Z, r24

	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 268:	ea e2       	ldi	r30, 0x2A	; 42
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	88 e1       	ldi	r24, 0x18	; 24
 26e:	80 83       	st	Z, r24

	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Async-mode
 270:	e0 e4       	ldi	r30, 0x40	; 64
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	86 e8       	ldi	r24, 0x86	; 134
 276:	80 83       	st	Z, r24
}
 278:	26 96       	adiw	r28, 0x06	; 6
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <uartSendChar>:

void uartSendChar(unsigned char data)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	0f 92       	push	r0
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	89 83       	std	Y+1, r24	; 0x01
 /* Wait for empty transmit buffer */
 while ( !( UCSRA & (1<<UDRE)) );
 296:	eb e2       	ldi	r30, 0x2B	; 43
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	80 81       	ld	r24, Z
 29c:	88 2f       	mov	r24, r24
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	80 72       	andi	r24, 0x20	; 32
 2a2:	90 70       	andi	r25, 0x00	; 0
 2a4:	00 97       	sbiw	r24, 0x00	; 0
 2a6:	b9 f3       	breq	.-18     	; 0x296 <uartSendChar+0xc>
 /* Put data into buffer, sends the data */
 UDR = data;
 2a8:	ec e2       	ldi	r30, 0x2C	; 44
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	89 81       	ldd	r24, Y+1	; 0x01
 2ae:	80 83       	st	Z, r24
}
 2b0:	0f 90       	pop	r0
 2b2:	cf 91       	pop	r28
 2b4:	df 91       	pop	r29
 2b6:	08 95       	ret

000002b8 <uartSendString>:

void uartSendString(char* str, uint32_t size){
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	2a 97       	sbiw	r28, 0x0a	; 10
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	9e 83       	std	Y+6, r25	; 0x06
 2ce:	8d 83       	std	Y+5, r24	; 0x05
 2d0:	4f 83       	std	Y+7, r20	; 0x07
 2d2:	58 87       	std	Y+8, r21	; 0x08
 2d4:	69 87       	std	Y+9, r22	; 0x09
 2d6:	7a 87       	std	Y+10, r23	; 0x0a
	uint32_t i;

	for(i=0;i<size;i++){
 2d8:	19 82       	std	Y+1, r1	; 0x01
 2da:	1a 82       	std	Y+2, r1	; 0x02
 2dc:	1b 82       	std	Y+3, r1	; 0x03
 2de:	1c 82       	std	Y+4, r1	; 0x04
 2e0:	15 c0       	rjmp	.+42     	; 0x30c <uartSendString+0x54>
		uartSendChar(str[i]);
 2e2:	29 81       	ldd	r18, Y+1	; 0x01
 2e4:	3a 81       	ldd	r19, Y+2	; 0x02
 2e6:	8d 81       	ldd	r24, Y+5	; 0x05
 2e8:	9e 81       	ldd	r25, Y+6	; 0x06
 2ea:	fc 01       	movw	r30, r24
 2ec:	e2 0f       	add	r30, r18
 2ee:	f3 1f       	adc	r31, r19
 2f0:	80 81       	ld	r24, Z
 2f2:	0e 94 45 01 	call	0x28a	; 0x28a <uartSendChar>
}

void uartSendString(char* str, uint32_t size){
	uint32_t i;

	for(i=0;i<size;i++){
 2f6:	89 81       	ldd	r24, Y+1	; 0x01
 2f8:	9a 81       	ldd	r25, Y+2	; 0x02
 2fa:	ab 81       	ldd	r26, Y+3	; 0x03
 2fc:	bc 81       	ldd	r27, Y+4	; 0x04
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	a1 1d       	adc	r26, r1
 302:	b1 1d       	adc	r27, r1
 304:	89 83       	std	Y+1, r24	; 0x01
 306:	9a 83       	std	Y+2, r25	; 0x02
 308:	ab 83       	std	Y+3, r26	; 0x03
 30a:	bc 83       	std	Y+4, r27	; 0x04
 30c:	29 81       	ldd	r18, Y+1	; 0x01
 30e:	3a 81       	ldd	r19, Y+2	; 0x02
 310:	4b 81       	ldd	r20, Y+3	; 0x03
 312:	5c 81       	ldd	r21, Y+4	; 0x04
 314:	8f 81       	ldd	r24, Y+7	; 0x07
 316:	98 85       	ldd	r25, Y+8	; 0x08
 318:	a9 85       	ldd	r26, Y+9	; 0x09
 31a:	ba 85       	ldd	r27, Y+10	; 0x0a
 31c:	28 17       	cp	r18, r24
 31e:	39 07       	cpc	r19, r25
 320:	4a 07       	cpc	r20, r26
 322:	5b 07       	cpc	r21, r27
 324:	f0 f2       	brcs	.-68     	; 0x2e2 <uartSendString+0x2a>
		uartSendChar(str[i]);
	}
}
 326:	2a 96       	adiw	r28, 0x0a	; 10
 328:	0f b6       	in	r0, 0x3f	; 63
 32a:	f8 94       	cli
 32c:	de bf       	out	0x3e, r29	; 62
 32e:	0f be       	out	0x3f, r0	; 63
 330:	cd bf       	out	0x3d, r28	; 61
 332:	cf 91       	pop	r28
 334:	df 91       	pop	r29
 336:	08 95       	ret

00000338 <convertToChar>:
 */

#include "Includes/utils.h"


void convertToChar(uint8_t number, char* tab){
 338:	df 93       	push	r29
 33a:	cf 93       	push	r28
 33c:	00 d0       	rcall	.+0      	; 0x33e <convertToChar+0x6>
 33e:	0f 92       	push	r0
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	7b 83       	std	Y+3, r23	; 0x03
 348:	6a 83       	std	Y+2, r22	; 0x02

	tab[0] = number%10 + '0';		//tab[0] - LSB
 34a:	89 81       	ldd	r24, Y+1	; 0x01
 34c:	9a e0       	ldi	r25, 0x0A	; 10
 34e:	69 2f       	mov	r22, r25
 350:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodqi4>
 354:	89 2f       	mov	r24, r25
 356:	80 5d       	subi	r24, 0xD0	; 208
 358:	ea 81       	ldd	r30, Y+2	; 0x02
 35a:	fb 81       	ldd	r31, Y+3	; 0x03
 35c:	80 83       	st	Z, r24
	tab[1] = number%100/10 + '0';
 35e:	8a 81       	ldd	r24, Y+2	; 0x02
 360:	9b 81       	ldd	r25, Y+3	; 0x03
 362:	fc 01       	movw	r30, r24
 364:	31 96       	adiw	r30, 0x01	; 1
 366:	89 81       	ldd	r24, Y+1	; 0x01
 368:	94 e6       	ldi	r25, 0x64	; 100
 36a:	69 2f       	mov	r22, r25
 36c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodqi4>
 370:	89 2f       	mov	r24, r25
 372:	9a e0       	ldi	r25, 0x0A	; 10
 374:	69 2f       	mov	r22, r25
 376:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodqi4>
 37a:	80 5d       	subi	r24, 0xD0	; 208
 37c:	80 83       	st	Z, r24
	tab[2] = number/100 + '0';
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	9b 81       	ldd	r25, Y+3	; 0x03
 382:	fc 01       	movw	r30, r24
 384:	32 96       	adiw	r30, 0x02	; 2
 386:	89 81       	ldd	r24, Y+1	; 0x01
 388:	94 e6       	ldi	r25, 0x64	; 100
 38a:	69 2f       	mov	r22, r25
 38c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <__udivmodqi4>
 390:	80 5d       	subi	r24, 0xD0	; 208
 392:	80 83       	st	Z, r24
}
 394:	0f 90       	pop	r0
 396:	0f 90       	pop	r0
 398:	0f 90       	pop	r0
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <__udivmodqi4>:
 3a0:	99 1b       	sub	r25, r25
 3a2:	79 e0       	ldi	r23, 0x09	; 9
 3a4:	04 c0       	rjmp	.+8      	; 0x3ae <__udivmodqi4_ep>

000003a6 <__udivmodqi4_loop>:
 3a6:	99 1f       	adc	r25, r25
 3a8:	96 17       	cp	r25, r22
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__udivmodqi4_ep>
 3ac:	96 1b       	sub	r25, r22

000003ae <__udivmodqi4_ep>:
 3ae:	88 1f       	adc	r24, r24
 3b0:	7a 95       	dec	r23
 3b2:	c9 f7       	brne	.-14     	; 0x3a6 <__udivmodqi4_loop>
 3b4:	80 95       	com	r24
 3b6:	08 95       	ret

000003b8 <__divmodsi4>:
 3b8:	97 fb       	bst	r25, 7
 3ba:	09 2e       	mov	r0, r25
 3bc:	05 26       	eor	r0, r21
 3be:	0e d0       	rcall	.+28     	; 0x3dc <__divmodsi4_neg1>
 3c0:	57 fd       	sbrc	r21, 7
 3c2:	04 d0       	rcall	.+8      	; 0x3cc <__divmodsi4_neg2>
 3c4:	14 d0       	rcall	.+40     	; 0x3ee <__udivmodsi4>
 3c6:	0a d0       	rcall	.+20     	; 0x3dc <__divmodsi4_neg1>
 3c8:	00 1c       	adc	r0, r0
 3ca:	38 f4       	brcc	.+14     	; 0x3da <__divmodsi4_exit>

000003cc <__divmodsi4_neg2>:
 3cc:	50 95       	com	r21
 3ce:	40 95       	com	r20
 3d0:	30 95       	com	r19
 3d2:	21 95       	neg	r18
 3d4:	3f 4f       	sbci	r19, 0xFF	; 255
 3d6:	4f 4f       	sbci	r20, 0xFF	; 255
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255

000003da <__divmodsi4_exit>:
 3da:	08 95       	ret

000003dc <__divmodsi4_neg1>:
 3dc:	f6 f7       	brtc	.-4      	; 0x3da <__divmodsi4_exit>
 3de:	90 95       	com	r25
 3e0:	80 95       	com	r24
 3e2:	70 95       	com	r23
 3e4:	61 95       	neg	r22
 3e6:	7f 4f       	sbci	r23, 0xFF	; 255
 3e8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ea:	9f 4f       	sbci	r25, 0xFF	; 255
 3ec:	08 95       	ret

000003ee <__udivmodsi4>:
 3ee:	a1 e2       	ldi	r26, 0x21	; 33
 3f0:	1a 2e       	mov	r1, r26
 3f2:	aa 1b       	sub	r26, r26
 3f4:	bb 1b       	sub	r27, r27
 3f6:	fd 01       	movw	r30, r26
 3f8:	0d c0       	rjmp	.+26     	; 0x414 <__udivmodsi4_ep>

000003fa <__udivmodsi4_loop>:
 3fa:	aa 1f       	adc	r26, r26
 3fc:	bb 1f       	adc	r27, r27
 3fe:	ee 1f       	adc	r30, r30
 400:	ff 1f       	adc	r31, r31
 402:	a2 17       	cp	r26, r18
 404:	b3 07       	cpc	r27, r19
 406:	e4 07       	cpc	r30, r20
 408:	f5 07       	cpc	r31, r21
 40a:	20 f0       	brcs	.+8      	; 0x414 <__udivmodsi4_ep>
 40c:	a2 1b       	sub	r26, r18
 40e:	b3 0b       	sbc	r27, r19
 410:	e4 0b       	sbc	r30, r20
 412:	f5 0b       	sbc	r31, r21

00000414 <__udivmodsi4_ep>:
 414:	66 1f       	adc	r22, r22
 416:	77 1f       	adc	r23, r23
 418:	88 1f       	adc	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	1a 94       	dec	r1
 41e:	69 f7       	brne	.-38     	; 0x3fa <__udivmodsi4_loop>
 420:	60 95       	com	r22
 422:	70 95       	com	r23
 424:	80 95       	com	r24
 426:	90 95       	com	r25
 428:	9b 01       	movw	r18, r22
 42a:	ac 01       	movw	r20, r24
 42c:	bd 01       	movw	r22, r26
 42e:	cf 01       	movw	r24, r30
 430:	08 95       	ret

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
